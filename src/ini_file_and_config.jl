# The .ini file, if missing, is generated when calling `get_config_value`.
# It can be manually edited, and a new .ini file can be generated by
# deleting the previous one.

function _prepare_init_file_configuration(io)
    # Add a comment at top (IniFile.jl has no functions for comments)
    msg = """
        # Configuration file for 'StopsAndTimetables'.
        # You can modify and save the values here. To start over from 'factory settings':
        # Delete this file. A new file will be created next time configurations are used.
        #
        # NOTE: You need to download and unzip files from https://developer.entur.org/stops-and-timetable-data
        #       Then place the .xml files in the directories below. 
        # Stops files: E.g. tiamat-export-03_Oslo-202309231200015816.xml
        # Timetable files: E.g. MOR_MOR-Line-3_3_Alesund-Valderoya-Vigra.xml
        #                       _MOR_shared_data.xml         
        """
    println(io, msg)
    #
    conta = Inifile()
    set(conta, "Directories", "Stopstables", joinpath(homedir(), "StopsAndTimetables", "Stopstables"))
    set(conta, "Directories", "Timetables", joinpath(homedir(), "StopsAndTimetables", "Timetables"))
    # To file..
    println(io, conta)
    msg = """
        # The first `stops` file is kept in memory while detailing a request.
        # The other xml files are checked in sequence,
        # so place the counties most likely to be visisted by routes you 
        # are interested in on second, third, etc.
        # We leave out the last part of file names here, because they
        # are likely to change with updates of the data.
        # Simply delete old xml files to avoid conflict when updating.
        """
    println(io, msg)
    conta = Inifile() # This is a trick to be able to have comments in between sections.
    set(conta, "Filenames", "Other stops files by pri", repr([
        "user_additions"
        "tiamat-export-50_Trond"
        "tiamat-export-46_Vestl"
        "tiamat-export-34_Innla"
        "tiamat-export-30_Viken"
        "tiamat-export-38_Vestf"
        "tiamat-export-03_Oslo-"
        "tiamat-export-11_Rogal"
        "tiamat-export-42_Agder"
        "tiamat-export-18_Nordl"
        "tiamat-export-54_Troms"]))
    set(conta, "Filenames", "Default stops file", "tiamat-export-15_More ")
    println(io, conta)
end 


"""
    get_config_value(sect::String, key::String)
    get_config_value(sect, key, type::DataType; nothing_if_not_found = false)

Instead of passing long argument lists, we store configuration in a text file.
"""
function get_config_value(sect::String, key::String; nothing_if_not_found = false)
    fnam = _get_ini_fnam()
    ini = read(Inifile(), fnam)
    if sect âˆ‰ keys(sections(ini))
        msg = """$sect not a section in $fnam. 
        The existing are: $(keys(sections(ini))).
        If you delete the .ini file above, a new template will be generated.
        """
        throw(ArgumentError(msg))
    end
    if nothing_if_not_found
        get(ini, sect, key,  nothing)
    else
        s = get(ini, sect, key,  "")
        if s == ""
            throw(ArgumentError("""
                $key not a key with value in section $sect of file $fnam. 
            
                Example:
                [user]                          # section  
                user_name     = slartibartfast  # key and value
                perceived_age = 5

                Current file:
                $ini
            """))
        end
        s
    end
end
function get_config_value(sect, key, type::DataType; nothing_if_not_found = false) 
    st = get_config_value(sect, key; nothing_if_not_found)
    isnothing(st) && return nothing
    tryparse(type, st)
end

function get_config_value(sect, key, ::Type{Vector{String}}; nothing_if_not_found = false)
    st = get_config_value(sect, key; nothing_if_not_found)
    isnothing(st) && return nothing
    split(replace(st, "\"" => "")[2:end - 1], ", ")
end 


"delete_init_file()"
function delete_init_file()
    fna = _get_fnam_but_dont_create_file()
    if isfile(fna) 
        rm(fna)
        println("Removed $fna")
    else
        println("$fna Didn't and doesn't exist.")
    end
end




"Get an existing, readable ini file name, create it if necessary"
function _get_ini_fnam()
    fna = _get_fnam_but_dont_create_file()
    if !isfile(fna)
        open(_prepare_init_file_configuration, fna, "w+")
        # Launch an editor
        if Sys.iswindows()
            run(`cmd /c $fna`; wait = false)
        end
        println("Default settings stored in $fna")
    end
    fna
end
_get_fnam_but_dont_create_file() =  joinpath(homedir(), "StopsAndTimetables.ini")

#################################
# Configuration of file constants
#################################
"""
    configure_primary_stopplace_file()

For setting the path with filename, because storing this in a constant is faster.
"""
function configure_primary_stopplace_file()
    # The last part of file name is the file date, so we try to be more general
    first_part_of_file = get_config_value("Filenames", "Default stops file")
    @assert isdir(STOPPLACE_FILES_DIR) STOPPLACE_FILES_DIR
    candidates = readdir(STOPPLACE_FILES_DIR)
    file = first(filter(fi -> startswith(fi, first_part_of_file), candidates))
    path_with_filename = joinpath(STOPPLACE_FILES_DIR, file)
    @assert isfile(path_with_filename) path_with_filename
    path_with_filename
end


"""
    configure_primary_stopplace_file()

For setting the path with filename, because storing this in a constant is faster.
"""
function configure_ordered_stopplace_files()
    first_part_of_files = get_config_value("Filenames", "Other stops files by pri", Vector{String})
    candidates = readdir(STOPPLACE_FILES_DIR)
    files = map(first_part_of_files) do fir
        match = filter(ca -> startswith(ca, fir), candidates)
        @assert length(match) == 1
        first(match)
    end
    joinpath.(STOPPLACE_FILES_DIR, files)
end